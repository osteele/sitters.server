#!/usr/bin/env coffee

require('dotenv').load()
_ = require 'underscore'
path = require 'path'
read = require 'read'
util = require 'util'
yaml = require 'js-yaml'
Q = require 'q'
_.str = require('underscore.string')
_.mixin _.str.exports()
stripe = require('stripe')(process.env.STRIPE_SECRET_KEY)

argv = require('optimist').argv
process.env.FIREBASE_ENV = 'production' if argv.production

_(global).extend require('../lib/utils')
{User} = require '../app/lib/models'
firebase = require '../app/integrations/firebase'

Date.prototype.setToBeginningOfHour = (hour) ->
  @setHours hour if hour?
  @setMinutes 0
  @setSeconds 0
  @setMilliseconds 0

Defaults = {
  apiVersion          : 1
  card                : {cardType:'Visa', cvc:'123', exp_month:12, exp_year:2015, number:'4242424242424242'}
  deviceApnsToken     : '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef'
  deviceUuid          : '68753A44-4D6F-1226-9C60-0050E4C00067'
  invitationId        : 0
  sitterCount         : 2
  sitterId            : '70f81b13-baba-424b-855f-134553717a63'
  sitterResponseDelay : 0
  sitterStartTime     : new Date().tap -> @setToBeginningOfHour(18)
  sitterEndTime       : new Date().tap -> @setToBeginningOfHour(22)
  userAuthId          : 'facebook-172347878787877'
  userName            : 'Mom'
  userEmail           : 'mom@host.com'
  userRole            : 'parent'
}

authenticateAsUser = (userAuthId) ->
  [provider, id] = userAuthId.split('-', 2)
  firebase.authenticateAs {provider, id}

RequestTypeGenerators =
  addSitter: ->
    {delay:Defaults.sitterResponseDelay, sitterId:Defaults.sitterId}

  acceptInvitation: ->
    {invitationId:Defaults.invitationId}

  registerDeviceToken: ->
    {token:Defaults.deviceApnsToken, deviceUuid:Defaults.deviceUuid}

  registerPaymentToken: ->
    card = Defaults.card
    return card if this.mode == 'help'
    stripe.tokens.create(card:card).then (response) ->
      card = response.card
      cardInfo = {type:card.type, last4:card.last4, expirationMonth:card.exp_month, expirationYear:card.exp_year}
      # cardInfo = _.extend {}, cardInfo, {last4:cardInfo.number.match(/(.{4})$/)[1]}
      # delete cardInfo.number
      Q {token:response.id, cardInfo}

  registerUser: ->
    {displayName:Defaults.userName, email:Defaults.userEmail, role:Defaults.userRole}

  removePaymentCard: -> {}

  reserveSitter: ->
    startTime = Defaults.sitterStartTime
    endTime = Defaults.sitterEndTime
    {delay:Defaults.sitterResponseDelay, sitterId:Defaults.sitterId, startTime:startTime.toISOString(), endTime:endTime.toISOString()}

  setSitterCount: -> {count:Defaults.sitterCount}

  simulateServerError: -> {}

mergeCommandLineOptions = (parameters, source) ->
  for key, current of parameters
    value = source[key] ? source[_(key).underscored()] ? source[_(key).dasherize()]
    if value?
      value = Number(value) if current instanceof Number
      parameters[key] = value
  return parameters

sendRequestP = (requestType, options=argv, printMessage=argv['verbose']) ->
  parameters = RequestTypeGenerators[requestType].call(mode:'run')
  Q.resolve(parameters).then (parameters) ->
    parameters = mergeCommandLineOptions(parameters, options)
    request =
      requestType : requestType
      apiVersion  : Defaults.apiVersion
      deviceUuid  : Defaults.deviceUuid
      parameters  : parameters
      timestamp   : new Date().toISOString()
      userAuthId  : Defaults.userAuthId
    if printMessage
      console.info 'Sending request:'
      console.info yaml.dump(request).replace(/(^|\n)/g, '$1  ')
    deferred = Q.defer()
    requestFb = firebase.RequestFB.push request, (err) ->
      if err then deferred.reject err else deferred.resolve()
    console.info '->', requestFb.toString() if argv['verbose']
    return deferred.promise

usage = ->
  programName = 'client'
  console.error "Usage: #{programName} -h "
  console.error "       #{programName} [OPTIONS]"
  console.error "       #{programName} COMMAND [OPTIONS]"
  console.error "\nwhere COMMAND [OPTIONS] is one of:"
  for key, optionsFn of RequestTypeGenerators
    options = optionsFn.call(mode:'help')
    console.error ' ', _(key).dasherize(), ("--#{_(option).dasherize()}=#{util.inspect(v)}" for option, v of options).join(' ')

printMessage = (message) ->
  console.info "\nReceived message:"
  console.info yaml.dump(message).replace(/(^|\n)/g, "$1  ")

printMessages = ->
  userMessageFB = firebase.MessageFB.child(Defaults.userAuthId)
  userMessageFB.on 'child_added', (snapshot) ->
    key = snapshot.name()
    message = snapshot.val()
    printMessage message
    Defaults.invitationId = message.parameters.invitationId if message.parameters.invitationId?
    userMessageFB.child(key).remove()

cli = ->
  requestNames = {}
  _.keys(RequestTypeGenerators).forEach (name, i) -> requestNames[i + 1] = name
  _.forEach requestNames, (value, key) -> console.info "[#{key}] #{value}"
  console.info '[q] quit'
  read prompt:'Request? ', (err, input) ->
    process.exit() unless input? # ^C
    process.exit() if input.match(/^q$/i)
    console.info "\n"
    requestType = requestNames[input.split(/\s/)[0]]
    if requestType
      options = {}
      (input.split(/\s+/, 2)[1] || '').split(/\s+/).forEach (option) ->
        [name, value] = option.split('=', 2)
        name = name.replace(/^--?/, '')
        options[name] = value
      sendRequestP(requestType, options, true).done ->
        # delay, so that if there's a message it shows up before the prompt
        Q.delay(500).then ->
          console.info ''
          cli()
    else
      console.error "Unknown command: #{input}"
      cli()

main = ->
  requestType = argv._[0]
  if requestType and _(requestType).camelize() of RequestTypeGenerators
    requestType = _(requestType).camelize()
    sendRequest(requestType).done -> process.exit()
  else if requestType
    console.error "Unknown request type: #{requestType}"
    usage()
    process.exit 1
  else if argv.h or argv.help
    usage()
    process.exit()
  else
    printMessages()
    cli()

die = (msg) ->
  console.error msg
  process.exit 1

overrideDefaults = ->
  if userId = argv['user-id']
    User.find(userId).then (user) ->
      die "No user ##{userId}" unless user
      console.info "Simulating user ##{userId} <#{user.email}>"
      Defaults.userName = user.displayName
      Defaults.userEmail = user.email
      user.getAccounts().then (accounts) ->
        Defaults.userAuthId = accounts[0].authKey if accounts.length

Q.when(overrideDefaults())
  .then(-> authenticateAsUser Defaults.userAuthId)
  .then(-> main())
  .done()
