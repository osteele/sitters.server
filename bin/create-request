#!/usr/bin/env coffee

require('dotenv').load()
_ = require 'underscore'
path = require 'path'
read = require 'read'
util = require 'util'
yaml = require 'js-yaml'
Q = require 'q'
_.str = require('underscore.string')
_.mixin _.str.exports()

stripe = require('stripe')(process.env.STRIPE_SECRET_KEY)

argv = require('optimist').argv
process.env.ENVIRONMENT = 'production' if argv.production

firebase = require '../lib/firebase'
_(global).extend require('../lib/utils')

Date.prototype.setToBeginningOfHour = (hour) ->
  @setHours hour if hour?
  @setMinutes 0
  @setSeconds 0
  @setMilliseconds 0

Defaults = {
  apiVersion          : 1
  card                : {cardType:'Visa', cvc:'123', exp_month:12, exp_year:2015, number:'4242424242424242'}
  deviceApnsToken     : '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef'
  deviceUuid          : '68753A44-4D6F-1226-9C60-0050E4C00067'
  sitterCount         : 2
  sitterId            : 2
  sitterResponseDelay : 0
  sitterStartTime     : new Date().tap -> @setToBeginningOfHour(18)
  sitterEndTime       : new Date().tap -> @setToBeginningOfHour(22)
  userAuthId          : 'facebook-172347878787877'
  userName            : 'Mom'
  userEmail           : 'mom@host.com'
}

do ->
  [provider, id] = Defaults.userAuthId.split('-', 2)
  firebase.authenticateAs {provider, id}

RequestTypeGenerators =
  addSitter: -> {delay:Defaults.sitterResponseDelay, sitterId:Defaults.sitterId}

  registerDeviceToken: ->
    {token:Defaults.deviceApnsToken}

  registerPaymentToken: ->
    card = Defaults.card
    return card if this.mode == 'help'
    stripe.tokens.create(card:card).then (response) ->
      card = response.card
      cardInfo = {type:card.type, last4:card.last4, expirationMonth:card.exp_month, expirationYear:card.exp_year}
      # cardInfo = _.extend {}, cardInfo, {last4:cardInfo.number.match(/(.{4})$/)[1]}
      # delete cardInfo.number
      Q {token:response.id, cardInfo}

  registerUser: -> {displayName:Defaults.userName, email:Defaults.userEmail}

  removePaymentCard: -> {}

  reserveSitter: ->
    startTime = Defaults.sitterStartTime
    endTime = Defaults.sitterEndTime
    {delay:Defaults.sitterResponseDelay, sitterId:Defaults.sitterId, startTime:startTime.toISOString(), endTime:endTime.toISOString()}

  setSitterCount: -> {count:Defaults.sitterCount}

  simulateServerError: -> {}

mergeCommandLineParameters = (parameters) ->
  for key, value of parameters
    optionName = _(key).underscored()
    optionValue = argv[optionName]
    if optionValue?
      optionValue = Number(optionValue) if value instanceof Number
      parameters[key] = optionValue
  return parameters

sendRequest = (requestType) ->
  parameters = RequestTypeGenerators[requestType].call(mode:'run')
  Q.resolve(parameters).then (parameters) ->
    request = {
      requestType : requestType
      apiVersion  : Defaults.apiVersion
      deviceUuid  : Defaults.deviceUuid
      parameters  : mergeCommandLineParameters(parameters)
      timestamp   : new Date().toISOString()
      userAuthId  : Defaults.userAuthId
    }
    if argv['verbose']
      console.info 'Message:'
      console.info yaml.dump(request).replace(/(^|\n)/g, '$1  ')
    deferred = Q.defer()
    requestFb = firebase.RequestFB.push request, (err) ->
      if err then deferred.reject err else deferred.resolve()
    console.info '->', requestFb.toString() if argv['verbose']
    return deferred.promise

help = ->
  programName =  './' + path.relative(process.cwd(), argv.$0.replace(/^coffee\s+/, ''))
  console.info "Usage: #{programName} COMMAND [OPTIONS]"
  console.info "Commands:"
  for key, optionsFn of RequestTypeGenerators
    options = optionsFn.call(mode:'help')
    console.info ' ', _(key).dasherize(), ("--#{_(option).dasherize()}=#{util.inspect(v)}" for option, v of options).join(' ')

cli = ->
  requestTypes = _.keys(RequestTypeGenerators)
  requestTypes.forEach (name, i) -> console.log "[#{i}] #{name}"
  console.log '[Q] quit'
  read prompt:'? ', (err, input) ->
    process.exit() if input.match(/^q$/i)
    requestType = requestTypes[input]
    if requestType
      console.info "Sending #{requestType}"
      sendRequest(requestType).done -> console.info ''; cli()
    else
      console.info "Unknown command: #{input}"
      cli()

requestType = argv._[0]
if requestType and _(requestType).camelize() of RequestTypeGenerators
  requestType = _(requestType).camelize()
  sendRequest(requestType).done -> process.exit()
else if requestType
  console.error "Unknown request type: #{requestType}"
  help()
  process.exit 1
else if argv.i or argv.console
  cli()
else
  help()
  process.exit()
