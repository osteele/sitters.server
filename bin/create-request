#!/usr/bin/env coffee

require('dotenv').load()
_ = require 'underscore'
path = require 'path'
util = require 'util'
Q = require 'q'
_.str = require('underscore.string')
_.mixin _.str.exports()

stripe = require('stripe')(process.env.STRIPE_SECRET_KEY)

argv = require('optimist').argv
process.env.ENVIRONMENT = 'production' if argv.production

Firebase = require '../lib/firebase'
_(global).extend require('../lib/utils')

Date.prototype.setToBeginningOfHour = (hour) ->
  @setHours hour if hour?
  @setMinutes 0
  @setSeconds 0
  @setMilliseconds 0

Defaults = {
  userAuthId: 'facebook-172347878787877'
  cardInfo: {cardType:'Visa', number:'4242424242424242', expirationMonth:12, expirationYear:2015, cvc:'123'}
  deviceToken: '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef'
  sitterCount: 2
  sitterId: 2
  sitterResponseDelay: 0
  sitterStartTime: new Date().tap -> @setToBeginningOfHour(18)
  sitterEndTime: new Date().tap -> @setToBeginningOfHour(22)
  userName: 'Mom'
  userEmail: 'mom@host.com'
}

do ->
  [provider, id] = Defaults.userAuthId.split('-', 2)
  Firebase.authenticateAs {provider, id}

RequestTypeGenerators =
  addSitter: -> {delay:Defaults.sitterResponseDelay, sitterId:Defaults.sitterId}

  registerDeviceToken: ->
    {token: Defaults.deviceToken}

  registerPaymentToken: ->
    cardInfo = Defaults.cardInfo
    return cardInfo if this.mode == 'help'
    stripeCardInfo = {number:cardInfo.number, exp_month:cardInfo.expirationMonth, exp_year:cardInfo.expirationYear, cvc:cardInfo.cvc}
    stripe.tokens.create(card:stripeCardInfo).then (response) ->
      cardInfo = _.extend {}, cardInfo, {last4:cardInfo.number.match(/(.{4})$/)[1]}
      Q {token:response.id, cardInfo}

  registerUser: -> {displayName:Defaults.userName, email:Defaults.userEmail}

  removePaymentCard: -> {}

  reserveSitter: ->
    startTime = Defaults.sitterStartTime
    endTime = Defaults.sitterEndTime
    {delay:Defaults.sitterResponseDelay, sitterId:Defaults.sitterId, startTime:startTime.toISOString(), endTime:endTime.toISOString()}

  setSitterCount: -> {count:Defaults.sitterCount}

  simulateServerError: -> {}

mergeCommandLineParameters = (parameters) ->
  for key, value of parameters
    optionName = _(key).underscored()
    optionValue = argv[optionName]
    if optionValue?
      optionValue = Number(optionValue) if value instanceof Number
      parameters[key] = optionValue
  return parameters

requestTypeName = argv._[0] # in train-case
requestType = requestTypeName && _(requestTypeName).camelize()
if requestType of RequestTypeGenerators
  parameters = RequestTypeGenerators[requestType].call(mode:'run')
  userAuthId = Defaults.userAuthId
  Q.resolve(parameters).then((parameters) ->
    parameters = mergeCommandLineParameters(parameters)
    timestamp = new Date().toISOString()
    deviceUuid = '68753A44-4D6F-1226-9C60-0050E4C00067'
    request = {requestType, deviceUuid, parameters, timestamp, userAuthId}
    console.info request if argv['show-request']
    Firebase.RequestFB.push request, -> process.exit()
  ).done()
else
  programName =  './' + path.relative(process.cwd(), argv.$0.replace(/^coffee\s+/, ''))
  console.info "Usage: #{programName} COMMAND [OPTIONS]"
  console.info "Commands:"
  for key, optionsFn of RequestTypeGenerators
    options = optionsFn.call(mode:'help')
    console.info ' ', _(key).dasherize(), ("--#{_(option).dasherize()}=#{util.inspect(v)}" for option, v of options).join(' ')
  process.exit()
